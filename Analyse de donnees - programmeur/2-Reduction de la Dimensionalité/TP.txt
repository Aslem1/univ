{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyse de Données - Développeur\n",
    "## TP2 : Réduction de la Dimensionnalité - Analyse en Composantes Principales\n",
    "### 1) Récupérez du TP1 les codes permettant de : \n",
    "#### - charger les données de TD\n",
    "#### - transformer un tableau de données et retourner à la fois les données transformées et leur matrice de covariance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2) Solution de l'ACP\n",
    "#### 2.1) Pouvez-vous expliquer le bout de code ci-dessous, ligne par ligne :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy.linalg import eigh as eigen\n",
    "[valp,vectp] = eigen(V)\n",
    "valp = np.sort(valp)[::-1]\n",
    "vectp = vectp[:, valp.argsort()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2) Calculez le tableau *Cp* des composantes principales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.3) Ecrivez une fonction *acpcanonique* ayant un seul argument d'entrée (lequel ?) et pour seuls arguments de sortie (lesquels ?) ceux nécessaires à l'analyse ultérieure (individus, variables) proprement dite. \n",
    "#### Vous la testerez sur les données de TD."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3) Analyse des Composantes Principales\n",
    "#### 3.1) Ecrivez le code permettant de quantifier la qualité de représentation des individus par les composantes principales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.2) Ecrivez le code permettant de quantifier la qualité de représentation des variables par les composantes principales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.3) Ecrivez une fonction *acpqual* retournant les éléments d'analyse (individus, variables).\n",
    "#### Vous la testerez sur les données de TD. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4) Réalisez l'Analyse en Composantes Principales des notes d'élèves de terminale. \n",
    "### - décidez s'il faut normer ou non\n",
    "### - calculez les composantes, et choisissez le nombre à retenir\n",
    "### - pour chacune, utilisez les les individus et variables bien représentés de sorte de les interpréter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "notes = pd.read_excel('../Data/terminale.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5) Pour les plus rapides, reconstruisez les notes de terminales à l'aide de 1, 2, ... composantes principales.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
