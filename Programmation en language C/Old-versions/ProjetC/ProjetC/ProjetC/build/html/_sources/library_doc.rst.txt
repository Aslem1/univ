Spell number documentation
==========================

/**
 * \file main.c
 * \brief Programme de tests(Ã  modifier).
 * \author Lucas Dumon, Agathe Perrin, Martin Ehlinger, Alexandre Bouloizeau, Tangui Georgeon 
 * \version 1.0.0
 * \date November/December 2020
 *
 * Program allowing to represent a whole number in full letters. 
 * And a program capable of displaying the representation of a number in a given dialect.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

French Library
--------------
This library displays the numbers in letters of the French language.
It does not take numbers above a trillion.
 
/**
 *
 * \static char unit
 * \brief stores units
 *
 * Stores the French language units in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
 /**
 * \static char tens
 * \brief stores tens
 *
 * Stores the French language tens in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
  /**
 * \static char ten
 * \brief stores ten
 *
 * Stores the French language ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * 
 *
 */
typedef struct _nbre
{
   char integer[256];  /*!< String of the whole part of the number  */
   char comma[256]; /*!< For its decimal part */
   char *str; /*!< String including both parts and the semicolon */
   int neg; /*!< To know if the number is negative */
   int comm; /*!< To find out if there is a comma in the number */
}


French African Library
----------------------
Chercher prononciation des nombres
It does not take numbers above a trillion.

/**
 * \static char unit
 * \brief stores units
 *
 * Stores the French African language units in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
 /**
 * \static char tens
 * \brief stores tens
 *
 * Stores the French African language tens in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
  /**
 * \static char ten
 * \brief stores ten
 *
 * Stores the French African language ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
typedef struct _nbre
{
   char integer[256];  /*!< String of the whole part of the number  */
   char comma[256]; /*!< For its decimal part */
   char *str; /*!< String including both parts and the semicolon */
   int neg; /*!< To know if the number is negative */
   int comm; /*!< To find out if there is a comma in the number */
}

Belgian French Library
----------------------
Unlike French in Belgian French we use "septante" for "soixante-dix" and "nonante" for "quatre-vingt-dix".
It does not take numbers above a trillion.

/**
 * \static char unit
 * \brief stores units
 *
 * Stores the French African language units in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
 /**
 * \static char tens
 * \brief stores tens
 *
 * Stores the French African language tens in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
  /**
 * \static char ten
 * \brief stores ten
 *
 * Stores the French African language ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
typedef struct _nbre
{
   char integer[256];  /*!< String of the whole part of the number  */
   char comma[256]; /*!< For its decimal part */
   char *str; /*!< String including both parts and the semicolon */
   int neg; /*!< To know if the number is negative */
   int comm; /*!< To find out if there is a comma in the number */
}


French Date Library
-------------------
The French date library only uses French numbers (It does not contain the specifics of Belgian and African). . 
It manages negative numbers.

/**
 * \static char unit
 * \brief stores units
 *
 * Stores the French African language units in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
 
 /**
 * \static char tens
 * \brief stores tens
 *
 * Stores the French African language tens in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Unlike French in Belgian French we use "septante" for "soixante-dix" and "nonante" for "quatre-vingt-dix".
 *
 */
 
  /**
 * \static char ten
 * \brief stores ten
 *
 * Stores the French African language ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 *
 */
typedef struct _nbre
{
   char integer[256];  /*!< String of the whole part of the number  */
   char comma[256]; /*!< For its decimal part */
   char *str; /*!< String including both parts and the semicolon */
   int neg; /*!< To know if the number is negative */
   int comm; /*!< To find out if there is a comma in the number */
}


Roman Numeration Library
------------------------
The Roman library is special in that it uses Roman numerals which it translates into numbers and letters.

 /**
 * \static char unit
 * \brief stores units
 *
 * Stores the Roman Numeration units in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * I for 1, II for 2, III for 3, and so on.
 *
 */
 
 /**
 * \static char tens
 * \brief stores tens
 *
 * Stores the Roman Numeration tens in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * X for 10, XX for 20, XXX for 30, and so on.
 *
 */
 
 /**
 * \static char hundreds
 * \brief stores hundreds
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * C for 100, CC for 200, CCC for 300, and so on.
 *
 */
 
 /**
 * \static char thousands
 * \brief stores thousands
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * M for 1000, MM for 2000, MMM for 3000, and so on.
 *
 */
 
 /**
 * \static char tensofthousands
 * \brief stores tensofthousands
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * X*X for 20 000, X*X*X* for 30 000, X*L* for 40 000, and so on.
 *
 */
 
 /**
 * \static char hundredsofthousands
 * \brief stores hundredsofthousands
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * C* for 100 000, C*C* for 200 000, C*C*C* for 300 000, and so on.
 *
 */
 
 /**
 * \static char millions
 * \brief stores millions
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * M* for 1 000 000, M*M* for 2 000 000, M*M*M* for 3 000 000, and so on.
 *
 */
 
 /**
 * \static char tensofmillions
 * \brief stores tensofmillions
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * X** for 10 000 000, X**X** for 20 000 000, X**X**X** for 30 000 000, and so on.
 *
 */
 
 /**
 * \static char tensofmillions
 * \brief stores tensofmillions
 *
 * Stores the Roman Numeration ten in a 2-dimensional table.
 * It is a string array of 16 characters each.
 * Here we use Roman numerals
 * C** for 100 000 000, C**C** for 200 000 000, C**C**C** for 300 000 000, and so on.
 *
 */
 
typedef struct _nbre
{
   char integer[256];  /*!< String of the whole part of the number  */
   char comma[256]; /*!< For its decimal part */
   char *str; /*!< String including both parts and the semicolon */
   int neg; /*!< To know if the number is negative */
   int comm; /*!< To find out if there is a comma in the number */
}
